//Search for an element in an array

//#include<iostream>
//using namespace std;
//void find_target(int arr[],int n,int element){
//	bool flag=false;
//	int idx=-1;
//	for(int i=0;i<n;i++){
//		if(arr[i]==element){
//			flag=true;
//			idx=i;
//			break;
//		}
//	}
//	if(flag==true) cout<<element<<" is Present at index "<<idx<<endl;
//	else{
//		cout<<element<<" is not Present "<<endl;
//		}
//}
//int main(){
//	int n;
//	cin>>n;
//	int arr[100];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int target;
//	cin>>target;
//	find_target(arr,n,target);
//		
//}




//Binary Search on Descending Order
//10,8,7,4,-3,-5

//#include<iostream>
//using namespace std;
//int main(){
//	int n;
//	cin>>n;
//	int arr[100];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int ele;
//	cin>>ele;
//	int s=0;
//	int e=n-1;
//	while(s<=e){
//		int m=s+(e-s)/2;
//		if(arr[m]==ele) {
//		cout<<"present at index "<<m<<endl;
//		break;
//	}
//		else if(arr[m]>ele) s=m+1;
//		else e=m-1;
//		
//	}
//}






//Given a sorted integer array and an integer 
//‘x’, find the lower bound of x. 


//#include<iostream>
//using namespace std;
//int main(){
//	int n;
//	cin>>n;
//	int arr[n];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int x;
//	cin>>x;
//	int s=0;
//	int e=n-1;
//	while(s<=e){
//		int m=s+(e-s)/2;
//		if(arr[m]==x){
//          cout<<arr[m-1];
//		  break;
//	    }
//	    else if(arr[m]<x){
//	    	if(arr[m+1]>x){
//	    		cout<<arr[m];
//	    		break;
//			}
//			else{
//				s=m+1;
//			}
//		}
//		else e=m-1;
//	    
//	    
//	}
//}




// Given a sorted integer array and an integer 
//‘x’, find the upper bound of x.

//#include<iostream>
//using namespace std;
//int main(){
//	int n;
//	cin>>n;
//	int arr[n];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int x;
//	cin>>x;
//	int s=0;
//	int e=n-1;
//	bool flag=false;
//	while(s<=e){
//		int m=s+(e-s)/2;
//		if(arr[m]==x){
//			flag=true;
//          cout<<arr[m+1]<<endl;
//          break;
//		 
//	    }
//	    else if(arr[m]<x){
//	    	
//				s=m+1;
//			}
//		
//		else e=m-1;
//	    
//	    
//	}
//	if(flag==false){
//	
//	cout<<arr[s]<<endl;
//}
//}





//Given a sorted array of n elements and a 
//target ‘x’. Find the first occurrence of ‘x’ in the 
//array. If ‘x’ does not exist return -1

//#include<iostream>
//using namespace std;
//int main(){
//	int n;
//	cin>>n;
//	int arr[n];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int x;
//	cin>>x;
//	int s=0;
//	int e=n-1;
//	
//	while(s<=e){
//		int m=s+(e-s)/2;
//		if(arr[m]==x){
//			if(arr[m-1]!=x){
//				cout<<(m);
//				break;
//			}
//			else{
//				e=m-1;
//			}
//          
//		 
//	    }
//	    else if(arr[m]<x){
//	    	
//				s=m+1;
//			}
//		
//		else e=m-1;
//	    
//	    
//	}
//
//}







//Given a sorted array of n elements and a 
//target ‘x’. Find the last occurrence of ‘x’ in the 
//array. If ‘x’ does not exist return -1


//#include<iostream>
//using namespace std;
//int main(){
//	int n;
//	cin>>n;
//	int arr[n];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int x;
//	cin>>x;
//	int s=0;
//	int e=n-1;
//	
//	while(s<=e){
//		int m=s+(e-s)/2;
//		if(arr[m]==x){
//			if(arr[m+1]!=x){
//				cout<<(m);
//				break;
//			}
//			else{
//				s=m+1;
//			}
// }
//	    else if(arr[m]<x){
//             	s=m+1;
//			}
//		
//		else e=m-1;
//	    
//	    
//	}
//
//}



// Given a sorted array of non-negative 
//distinct integers, find the smallest missing 
//non-negative element in it

#include <iostream>
using namespace std;

int main() {
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int s = 0;
    int e = n - 1;
    int missing = n; // Default to n if no element is missing within the range

    while (s <= e) {
        int m = s + (e - s) / 2;

        if (arr[m] == m) {
            s = m + 1;
        } else {
            missing = m; // Update the missing value
            e = m - 1;
        }
    }

    cout << missing << endl;

    return 0;
}





//Sqrt(x)
#include<iostream>
using namespace std;
int main(){
	int n;
	cin>>n;
	int s=0;
	int e=n;
	bool flag=false;
	while(s<=e){
		int m=s+(e-s)/2;
		if(m*m==n) {
			flag=true;
			cout<<m<<endl;
			break;
		}
		else if(m*m>n) e=m-1;
		else s=m+1;
	}
	if(flag==false) cout<<e<<endl;       // the high index will always give one less perfect square if not found....
	
}

