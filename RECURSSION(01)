//Using recurssion print "Good Morning" ten times...

//#include<iostream>
//using namespace std;
//void fun(int n){
//	if(n==0) return;
//    cout<<n<<"Pre Good Morning"<<endl;
//	fun(n-1);
//    cout<<n<<"Post Good Morning"<<endl;
//}
//int main(){
//	int n;
//	cin>>n;
//    fun(n);
//}
	



//FACTORIAL USING RECURSSION:
//Make a function which calculates the 
//factorial of n using recursion

//#include<iostream>
//using namespace std;
//int factorial(int n){
//	if(n==1 || n==0) return 1;
//    return n*factorial(n-1);
//}
//int main(){
//	int n;
//	cin>>n;
//	cout<<factorial(n);
//}



//We always have to stop our recurssion....so, we use base case 
//for itt.
//integer fn me call ek value lake deta haii



//Natural number 1 to n or n to 1 print

//#include<iostream>
//using namespace std;
//void naturalnumber(int n){
//	if(n==0) return;
////	naturalnumber(n-1);
//	cout<<n<<" ";
//	naturalnumber(n-1);
//}
//int main(){
//	int n;
//	cin>>n;
//	naturalnumber(n);
//}



//#include<iostream>
//using namespace std;
//int sum(int a){
//    
//	if(a==1){
//		return 1;
//	}
//	return a+sum(a-1);
//}
//int main(){
//	int n;
//	cin>>n;
//	cout<<sum(n);
//}

//Print sum from 1 to n (Return type):

//#include<iostream>
//using namespace std;
//int printsum(int a,int n){
//	if(n==1) return 1;
//	return a+n+printsum(a,n-1);
//}
//int main(){
//	int n;
//	cin>>n;
//	cout<<printsum(0,n);
//	
//}


//Print sum from 1 to n (Parameterised):

//#include<iostream>
//using namespace std;
//void printsum(int a,int n,int sum){
//	if(a>n){
//		cout<<sum;
//		return;
//		
//	}
//	printsum(a+1,n,sum+a);
//}
//int main(){
//	int n;
//	cin>>n;
//	printsum(1,n,0);
//}



//Make a function which calculates ‘a’ 
//raised to the power ‘b’ using recursion.

//#include<iostream>
//using namespace std;
//int power(int n,int a){
//	if(a==0) return 1;
//	return n*power(n,a-1);
//} 
//int main(){
//	int n,a;
//	cin>>n>>a;
//	cout<<power(n,a);
//	
//}
