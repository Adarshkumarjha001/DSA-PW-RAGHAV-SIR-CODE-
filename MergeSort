//#include<iostream>
//#include<bits/stdc++.h>
//using namespace std;
//void mergesort(vector<int> &v1,vector<int> &v2,vector<int> &v3){
//	int i=0;
//	int j=0;
//	int k=0;
//	while(i<v1.size() && j<v2.size()){
//		if(v1[i]<=v2[j]){
//			v3[k]=v1[i];
//			k++;
//			i++;
//		}
//		else{
//			v3[k]=v2[j];
//			k++;
//			j++;
//		}
//	}
//	if(i==v1.size()){
//		while(j<v2.size()){
//			v3[k]=v2[j];
//			k++;
//			j++;
//		}
//	}
//	else{
//		while(i<v1.size()){
//			v3[k]=v1[i];
//			k++;
//			i++;
//		}
//	}
//}
//void mergesort(vector<int> &v){
//    int n=v.size();
//	if(n==1) return;
//	int n1=n/2;
//	int n2=n-n/2;
//	vector<int> a(n1),b(n2);
//	for(int i=0;i<n1;i++){
//		a[i]=v[i];
//	}
//	for(int i=0;i<n2;i++){
//		b[i]=v[i+n1];
//	}
//	mergesort(a);
//	mergesort(b);
//	
//	
//	mergesort(a,b,v);
//	a.clear();
//	b.clear();
//	
//
//}
//int main(){
//	int arr1[]={1,4,5,8};
//	int n1=sizeof(arr1)/sizeof(arr1[0]);
//	vector<int> v1(arr1,arr1+n1);
//    int arr2[]={2,3 ,6,7,10,12};
//	int n2=sizeof(arr2)/sizeof(arr2[0]);
//	vector<int> v2(arr2,arr2+n2);
//	vector<int> res(n1+n2);
//	mergesort(v1,v2,res);
//	for(int i=0;i<res.size();i++){
//		cout<<res[i]<<" ";
//	}

//-------------------------------------------------------------------
    
//    int arr[]={5,1,31,0,4,19,6};
//    int n=sizeof(arr)/sizeof(arr[0]);
//    vector<int> v(arr,arr+n);
//    for(int i=0;i<v.size();i++){
//    	cout<<v[i]<<" ";
//    	
//	}
//	cout<<endl;
//	mergesort(v);
//	for(int i=0;i<v.size();i++){
//    	cout<<v[i]<<" ";
//    	
//	}
//	
//
//
//
//
//	
//}



//#include<iostream>
//#include<bits/stdc++.h>
//using namespace std;
//int main(){
//	int n;
//	cin>>n;
//	int arr[n];
//	for(int i=0;i<n;i++){
//		cin>>arr[i];
//	}
//	int count=0;
//	for(int i=0;i<n;i++){
//		for(int j=i+1;j<n;j++){
//			if(arr[i]>arr[j] && i<j) count++;
//		}
//	}
//	cout<<count;
//	
//}




#include<iostream>
#include<bits/stdc++.h>
using namespace std;
//int c=0;
int inversion(vector<int> &a,vector<int> &b){
	int count=0;
	int i=0;
	int j=0;
	while(i<a.size() && j<b.size()){
		if(a[i]>b[j]) {
			count+=(a.size()-i);
			j++;
			
		}
		else i++;
	}
	return count;
}
void mergesort(vector<int> &v1,vector<int> &v2,vector<int> &v3){
	int i=0;
	int j=0;
	int k=0;
	while(i<v1.size() && j<v2.size()){
		if(v1[i]<=v2[j]){
			v3[k]=v1[i];
			k++;
			i++;
		}
		else{
			v3[k]=v2[j];
			k++;
			j++;
		}
	}
	if(i==v1.size()){
		while(j<v2.size()){
			v3[k]=v2[j];
			k++;
			j++;
		}
	}
	else{
		while(i<v1.size()){
			v3[k]=v1[i];
			k++;
			i++;
		}
	}
}
int  mergesort(vector<int> &v){
	int count=0;
    int n=v.size();
	if(n==1) return 0;
	int n1=n/2;
	int n2=n-n/2;
	vector<int> a(n1),b(n2);
	for(int i=0;i<n1;i++){
		a[i]=v[i];
	}
	for(int i=0;i<n2;i++){
		b[i]=v[i+n1];
	}
	count+=mergesort(a);
	count+=mergesort(b);
	
	count+=inversion(a,b);
	
	
	mergesort(a,b,v);
	a.clear();
	b.clear();
	return count;

}
int main(){

   
    int arr[]={5,1,3,0,4,9,6};
    int n=sizeof(arr)/sizeof(arr[0]);
    vector<int> v(arr,arr+n);
    for(int i=0;i<v.size();i++){
    	cout<<v[i]<<" ";
    	
	}
	cout<<endl;
	cout<<mergesort(v);
//	cout<<c;
}
